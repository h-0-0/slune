# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest coverage pytest-cov
        python -m pip install -e .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest and create coverage report
      run: |
        cd $GITHUB_WORKSPACE
        python -m coverage run --module pytest --verbose && coverage report --show-missing > coverage_report.txt

    - name: Extract coverage percentage
      id: extract-coverage
      run: |
        COVERAGE_PERCENTAGE=$(grep -oP 'TOTAL.*?\K\d+(?=%)' coverage_report.txt)
        echo "::set-output name=coverage::$COVERAGE_PERCENTAGE"

    - name: Determine badge color
      id: determine-color
      run: |
        echo "COVERAGE=${{ steps.extract-coverage.outputs.coverage }}"
        if [ $(echo "${{ steps.extract-coverage.outputs.coverage }} < 70" | bc -l) -eq 1 ]; then
          echo "::set-output name=color::red"
        elif [ $(echo "${{ steps.extract-coverage.outputs.coverage }} < 90" | bc -l) -eq 1 ]; then
          echo "::set-output name=color::yellow"
        else
          echo "::set-output name=color::green"
        fi

    - name: Create Coverage Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: 4aa01e058fee448070c587f6967037e4
        filename: CodeCovSlune.json # Use test.svg if you want to use the SVG mode.
        label: Coverage
        message: "${{ steps.extract-coverage.outputs.coverage }}%"
        color: ${{ steps.determine-color.outputs.color }}