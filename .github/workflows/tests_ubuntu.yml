name: Tests ubuntu

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  initialize:
    runs-on: macos-latest

    steps:
      - name: Create results.txt
        run: |
          echo "RESULTS" > results.txt

      - name: Upload results.txt
        uses: actions/upload-artifact@v2
        with:
          name: results
          path: results.txt

  build:
    needs: initialize
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest coverage pytest-cov
        python -m pip install -e .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Download results.txt
      uses: actions/download-artifact@v2
      with:
        name: results

    - name: Test with pytest
      id: pytest
      run: |
        cd $GITHUB_WORKSPACE
        python -m pytest
        if [ $? -eq 0 ]; then
          echo "true" >> results.txt
        else
          echo "false" >> results.txt
        fi

  create-badge:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download results.txt
        uses: actions/download-artifact@v2
        with:
          name: results

      - name: Determine overall badge color
        id: determine-color
        run: |
          overall_status="passed"

          RESULTS=$(cat results.txt)
          # Loop through each line in the file
          while IFS= read -r line; do
            echo "Processing result: $line"
            if [[ "$line" == *"false"* ]]; then
              echo "Setting overall_status to failed"
              overall_status=failed
            fi
          done < results.txt

          echo "::set-output name=overall_status::${overall_status}"

          echo "COVERAGE=${overall_status}"
          if [ "${overall_status}" == "passed" ]; then
            echo "::set-output name=color::green"
          else
            echo "::set-output name=color::red"
          fi

      - name: Create Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 4aa01e058fee448070c587f6967037e4
          filename: Tests-ubuntu.json # Use test.svg if you want to use the SVG mode.
          label: Tests-ubuntu
          message: ${{ steps.determine-color.outputs.overall_status }}
          color: ${{ steps.determine-color.outputs.color }}